/* 
! DO NOT EDIT THIS FILE
This file is for build script.
You should run it before build.
*/
import fs from "fs"
import path from "path"
import logger from "@/utils/logger"

const interactionsPath = path.resolve("src/interactions")
const eventsPath = path.resolve("src/events")
const outputFile = path.resolve("src/.generated/registry.ts")

function sanitizeImportName(folder: string, file: string): string {
  return `${folder}_${file.replace(/\.ts$/, "").replace(/-/g, "_")}`
}

function walkInteractions() {
  const entries: {
    importLine: string
    importVar: string
    commandKey: string
  }[] = []

  const folders = fs.readdirSync(interactionsPath)

  for (const folder of folders) {
    const folderPath = path.join(interactionsPath, folder)
    if (!fs.statSync(folderPath).isDirectory()) continue

    const files = fs.readdirSync(folderPath).filter((f) => f.endsWith(".ts"))
    for (const file of files) {
      logger.debug(`Found interaction file: ${file}`)
      const importVar = sanitizeImportName(folder, file)
      const commandKey = file.replace(/\.ts$/, "")
      const importPath = `@/interactions/${folder}/${commandKey}`
      entries.push({
        importLine: `import ${importVar} from "${importPath}"`,
        importVar,
        commandKey,
      })
    }
  }

  return entries
}

function walkEvents() {
  return fs
    .readdirSync(eventsPath)
    .filter((f) => f.endsWith(".ts"))
    .map((file) => {
      logger.debug(`Found event file: ${file}`)
      const variable = `event_${file.replace(/\.ts$/, "")}`
      const importPath = `@/events/${file.replace(/\.ts$/, "")}`
      return {
        importLine: `import ${variable} from "${importPath}"`,
        variable,
      }
    })
}

function generate() {
  const interactions = walkInteractions()
  const events = walkEvents()

  const commandImports = interactions.map((i) => i.importLine).join("\n")
  const eventImports = events.map((e) => e.importLine).join("\n")

  const commandMap = interactions
    .map((i) => `  "${i.commandKey}": ${i.importVar}`)
    .join(",\n")
  const eventList = events.map((e) => `  ${e.variable}`).join(",\n")

  return `// Auto-generated by scripts/gen-registry.ts
${commandImports}
${eventImports}

export const commandRegistry = {
${commandMap}
}

export const eventRegistry = [
${eventList}
]
`
}

fs.mkdirSync(path.dirname(outputFile), { recursive: true })
fs.writeFileSync(outputFile, generate())
logger.info(`âœ… Registry generated at ${outputFile}`)
